<?php
/**
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2016 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Shop\Controller;

use Shop\Helpers\Cart;
use Shop\Model\Orders;
use Shop\Model\Goods;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;

class CartController extends AbstractActionController
{
    private $goods, $orders, $cart;

    function __construct(Goods $goods, Orders $orders, Cart $cart)
    {
        $this->goods = $goods;
        $this->orders = $orders;
        $this->cart = $cart;
    }

    public function onDispatch(MvcEvent $e)
    {
        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

    public function cartAction()
    {
        $goods = $this->cart->getCart();
        array_walk($goods, function(&$item){
            if( empty($item['image']) ){
                $item['image'] = 'no_image.png';
            }
            $item['image'] = '/static/images/' . $item['image'];
        });
        
        return new ViewModel(['items' => $goods, 'total_price' => $this->cart->getTotlaPrice()]);
    }

    public function addAction()
    {
        $res = "0";
        $product_id = $this->params()->fromRoute('id');

        try {
            if (!empty($product_id) && is_numeric($product_id)) {

                $product = $this->goods->getOnly(['id' => $product_id]);

                $data = [
                    'title' => $product['title'],
                    'image' => $product['image'],
                    'price' => $product['price'],
                    'full_price' => $product['price'] . " " . $product['currency'],
                ];

                $this->cart->add($product_id, $data);

                $res = "Товар добавлен";
            }

        }catch (\Exception $e){
            $res = "ERROR: " . $e->getMessage();
        }

        die($res);
    }

    public function delAction(){
        $product_id = $this->params()->fromRoute('id');
        $res = "0";
        if($this->cart->delete($product_id)){
            $res = "Товар удален";
        }

        die($res);
    }

    public function clearAction(){
        $res = "0";
        if (session_status() == PHP_SESSION_ACTIVE) {
            unset($_SESSION['goods'], $_SESSION['total_price']);
            $res = "Корзина очищена!";
        }

        die($res);
    }

}
